// Lex for VB
// Last update: 2014-07-17
// Reference:
// http://msdn.microsoft.com/zh-cn/library/ksh7h19t(v=vs.90).aspx
// TODO:
// Context, e.g., "Until" is a keyword only when it's after "Do".

// VB ignores case for keywords.
ignore_case = true;

lex = (
    // Quote
    {
        id = "comment";
        quote = [ "'" ];
        flags = "escape_eol";
    },
    {
        id = "comment";
        quote = [ "REM " ]; // Note the space after REM
        flags = "escape_eol";
    },
    {
        id = "comment";
        quote = [ "REM\t" ]; // Note the tab after REM
        flags = "escape_eol";
    },
    {
        id = "constant.string";
        quote = [ "\"", "\"" ];
        flags = "escape_eol";
    },
    {
        id = "constant.char";
        quote = [ "'", "'" ];
    },

    // Anyof
    { id = "constant.bool"; anyof = "True False"; },
    { id = "constant.null"; anyof = "Nothing"; },
    { id = "identifier"; anyof = "Me MyBase MyClass"; },
    {
        id = "identifier.function";
        anyof = "CBool CByte CChar CDate CDec CDbl "
                "CInt CLng CObj CSByte CShort CSng CStr CUInt CULong CUShort "
                "CType DirectCast TryCast";
    },
    {
        id = "statement";
        anyof = "AddHandler AddressOf Alias As Call Continue Declare Delegate "
                "Dim End Erase Error Event Exit Function Get GetType "
                "GetXMLNamespace Global GoSub GoTo Handles Implements Imports "
                "Inherits Let Lib MustInherit MustOverride Narrowing New "
                "On Operator Option Overrides Overrides ParamArray Private "
                "Property Protected Public RaiseEvent ReDim RemoveHandler "
                "Resume Return Set Stop Structure Sub SyncLock Using Widening "
                "With";
    },
    {
        id = "statement.conditional";
        anyof = "Case Else ElseIf Endif If Select Then";
    },
    {
        id = "statement.repeat";
        anyof = "Do Each For Loop Next Step To Wend While";
    },
    {
        id = "statement.exception";
        anyof = "Catch Finally Throw Try When";
    },
    {
        id = "statement.operator";
        anyof = "And AndAlso In Is IsNot Like Mod Not Or OrElse TypeOf Xor";
    },
    {
        id = "type";
        anyof = "Boolean Byte Char Date Decimal Double Integer Long Object "
                "Short Single String Variant UInteger ULong UShort";
    },
    {
        id = "type.qualifier";
        anyof = "ByRef ByVal Const Default Friend Of NotInheritable "
                "NotOverridable Optional Overridable Partial ReadOnly "
                "Shadows Shared Static WithEvents WriteOnly";
    },
    {
        id = "type.struct";
        anyof = "Class Enum Interface Module Namespace";
    },

    // Regex
    { id = "preproc"; regex = "#\s*Const\b"; },
    { id = "preproc"; regex = "#\s*Else\b"; },
    { id = "preproc"; regex = "#\s*ElseIf\b"; },
    { id = "preproc"; regex = "#\s*End\b"; },
    { id = "preproc"; regex = "#\s*If\b"; },

    // TODO
    { id = "constant.number"; regex = "[1-9][0-9]*[Ll]?[Uu]?"; }, // Decimal
    // Order matters:
    // - Put Hex before Octal.
    // - Put Exponential before Simple.
    { id = "constant.number"; regex = "0[Xx][[:xdigit:]]*[Ll]?[Uu]?"; }, // Hex
    { id = "constant.number"; regex = "0[0-7]*[Ll]?[Uu]?"; }, // Octal
    { id = "constant.number"; regex = "(\d+|\d+\.|\d+\.\d+|\.\d+)[Ee][\+-]?\d+[LlFf]?"; }, // Exponential float
    { id = "constant.number"; regex = "(\d+\.|\d+\.\d+|\.\d+)[LlFf]?"; } // Simple float
);
