// Lex for Rust
// Last update: 2017-04-05

lex = (
    { id = "comment"; quote = [ "/*", "*/" ]; multi_line = true; },
    { id = "comment"; quote = [ "//" ]; escape_eol = true; },
    { id = "constant.string"; quote = [ "\"", "\"" ]; escape_eol = true; },
    { id = "constant.char"; quote = [ "'", "'" ]; },

    { id = "constant.bool"; anyof = "true false"; },
    { id = "constant"; anyof = "self"; },

    {
        id = "statement";
        anyof = "break continue return type as box extern fn in impl let pub "
                "super unsafe where use mod";
    },

    { id = "statement.conditional"; anyof = "match if else"; },
    { id = "statement.repeat"; anyof = "for loop while"; },

    { id = "statement.operator"; anyof = "Copy Send Sized Sync Drop Fn FnMut FnOnce"; },

    // Built-in types
    { id = "type"; anyof = "isize usize char bool u8 u16 u32 u64 u128 f32 f64 i8 i16 i32 i64 i128 str Self"; },

    // traits
    {
        id = "type";
        anyof = "Box ToOwned Clone PartialEq PartialOrd Eq Ord AsRef AsMut Into "
                "From Default Iterator Extend IntoIterator DoubleEndedIterator "
                "ExactSizeIterator SliceConcatExt String ToString Vec";
    },

    // enum
    {
        id = "type";
        anyof = "Option Some None Result Ok Err";
    },

    { id = "type.qualifier"; anyof = "move mut ref static const"; },
    { id = "type.struct"; anyof = "struct enum union"; },

    { id = "preproc"; regex = "#\s*ifdef\b"; },
    { id = "preproc"; regex = "#\s*ifndef\b"; },
    { id = "preproc"; regex = "#\s*if\s+!?\s*defined\b"; },
    { id = "preproc"; regex = "#\s*if\b"; },
    { id = "preproc"; regex = "#\s*elif\s+!?\s*defined\b"; },
    { id = "preproc"; regex = "#\s*elif\b"; },
    { id = "preproc"; regex = "#\s*else\b"; },
    { id = "preproc"; regex = "#\s*define\b"; },
    { id = "preproc"; regex = "#\s*endif\b"; },
    { id = "preproc"; regex = "#\s*include\s*\".+\""; },
    { id = "preproc"; regex = "#\s*include\s*<.+>"; },
    { id = "preproc"; regex = "#\s*include\b"; },
    { id = "preproc"; regex = "#\s*pragma\b"; },

    { id = "constant.number"; prefix = "\d"; use_regex = true; }

);
