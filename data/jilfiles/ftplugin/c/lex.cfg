// Lex for C
// Last update: 2015-10-26

lex = (
    { id = "comment"; quote = [ "/*", "*/" ]; multi_line = true; },
    { id = "constant.string"; quote = [ "\"", "\"" ]; escape_eol= true; },
    { id = "constant.char"; quote = [ "'", "'" ]; },

    { id = "statement"; anyof = "break continue default goto return typedef"; },
    { id = "statement.conditional"; anyof = "if else switch case"; },
    { id = "statement.repeat"; anyof = "for do while"; },
    { id = "statement.operator"; anyof = "sizeof"; },
    { id = "type"; anyof = "void char short int long float double signed unsigned wchar_t"; },
    { id = "type.qualifier"; anyof = "auto static register extern const volatile mutable"; },
    { id = "type.struct"; anyof = "enum struct union"; },

    { id = "preproc"; regex = "#\s*ifdef\b"; },
    { id = "preproc"; regex = "#\s*ifndef\b"; },
    { id = "preproc"; regex = "#\s*if\s+!?\s*defined\b"; },
    { id = "preproc"; regex = "#\s*if\b"; },
    { id = "preproc"; regex = "#\s*elif\s+!?\s*defined\b"; },
    { id = "preproc"; regex = "#\s*elif\b"; },
    { id = "preproc"; regex = "#\s*else\b"; },
    { id = "preproc"; regex = "#\s*define\b"; },
    { id = "preproc"; regex = "#\s*endif\b"; },
    { id = "preproc"; regex = "#\s*include\s*\".+\""; },
    { id = "preproc"; regex = "#\s*include\s*<.+>"; },
    { id = "preproc"; regex = "#\s*include\b"; },
    { id = "preproc"; regex = "#\s*pragma\b"; },

    { id = "constant.number"; prefix = "\d"; use_regex = true; }
);
